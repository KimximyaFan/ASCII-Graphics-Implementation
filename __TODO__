
Entity의 캡슐화 고려, GetMeshes 구현, shared ptr 고려 위치는 Renderer::Render()
렌더러 컬러에 따른 if분기
씬에서 렌더러 렌더 구현
Entity vertex normal preprocess 구현
Draw Mesh 코드 변경, 버텍스에 PV 적용하면 안됨


@@
game 구현시 AABB 쪽 생각하고 개선해보기, 현재는 entity mesh 둘다 local aabb 가지고있고
이를 M 행렬로 변환해서 가져오는 형태임

@@
각종 함수 오버헤드나 불필요한 복사 있는지 점검

@@
Renderer에서 칼라 값에 따른 if 분기 char 만들기 (cartoon rendering)

@@
main 함수 만들기

@@
여유되면 삼각형 그리는 방법 바라센트릭 vs 스캔라인 비교해서 analysis

@@
ambient 구현 문제 (현재는 intensity에 계수 곱해서 쓰고 있음, 해당 씬의 gloabl ambient를 어떻게 구현할건지)

@@
clipper.cc 파일의 clipmesh 함수 최적화 (나중에)

@@
renderer.cc 파일의 drawmesh 최적화 가능
(deep copy 부분 capacity 재사용, reserve and 직접복사, std::transform, gpu programming )


깊은 복사(deep copy)의 비용
매 Draw 호출마다 Mesh out_mesh = mesh; 로 벡터 데이터를 전부 복사하면,

버텍스·인덱스 수가 많을수록 심각한 성능 저하를 유발합니다.

@@
컬링·드로우 루프 병합 (선택)
순서를 재정렬하거나 추가 정렬이 필요 없으면, 컬링과 즉시 드로우를 한 루프에서 처리해도 됩니다.

@@
Renderer::Render(),
MatrixConversion()에서 8개 코너 변환 대신 center/extent 식으로 AABB 변환 (연산 감소함)
성능비교 테스트